Computer Systems Coursework, Part2
1. A file server receives requests via a network. It takes 20 ms to dispatch the
requested data and do the necessary processing, assuming that the data
needed are in the cache. If a disk operation is needed, as is the case in
one third of the time, an additional 90 ms is required, during which time
the thread sleeps.
(a) How many request/sec can the server handle if it is single threaded?
[10 marks]

A request requiring a disk operation will take 20ms + 90ms = 110ms

The weighted average is:

	= (2/3)*20ms + (1/3)*110ms
	= 50ms (per request)
	
Thus requests per second is:

	= 1/0.05
	= 20 requests per sec
	
(b) If it is multithreaded (one thread popping up at each request)?
[5 marks]
Subtotal: [15 marks]

For a multithreaded server, all the waiting for the disk is overlapped, so every request takes 20ms, and the server can handle 50 requests per second.


2. Five jobs A through E arrive at a multiprogrammed computer center at
almost the same time. They have estimated running times of 10, 6, 2, 4
and 8 minutes, respectively. Their fixed priorities are 3, 5, 2, 1, and 4,
respectively. For each of the following scheduling algorithms, determine
the average turnaround time.
(a) Round robin (choose a realistic quantum that would allow a short
response time for potential user requests).
[5 marks]

The performance of the RR algorithm depends heavily on the size of the time quantum. If the time quantum is extermely large, the RR policy is the same as the FCFS policy. If the time quantum is extremely small (say, 1 millisecond) , the RR approach is called processor sharing and (in theory) creates the appearance that each of the n processes has its own processor running at a 1/n the speed of the real processor.

assuming a quantum of 1 second to allow for user input.

JOB	Running time	Priority
A			10		3
B			6		5
C			2		2
D			4		1
E			8		4

Thus while all 5 processes are in running, in 1 second they get 1 second of processing time a piece. In 10 seconds, each would have processed 2 seconds. In 1 minute, 12 seconds a piece. In 5 minutes they would have 1 minute a piece. Thus after 10 minutes they would have had 2 minutes of processing time a piece, at this rate Job C would have completed by the 10th minute.

Job C elapsed time 9mins 58secs

extrapolating this method we get the following elapsed times:

Job D elapsed time 17mins 59secs
Job B elapsed time 23mins 59secs
Job E elapsed time 28mins
Job A elapsed time 30mins



We now have additional processing time available.

1	2	3	4	5	Elapsed time
A	B	C	D	E	5
A	B	C	D	E	10	
A	B		D	E	14
A	B		D	E	18
A	B			E	21
A	B			E	24
A				E	26
A				E	28
A					29
A					30

The turnaround time for each process:
A = 30min, B = 23min, C = 8min, D = 17min, E = 28min
The average turnaround time is:
(30+23+8+17+28) / 5 = 21.2min

(b) Priority scheduling (5 being the highest priority).
[4 marks]

Assuming 5 is the highest priority
Priority	Job	Turnaround time
5			B	6min
4			E	6+8 = 14min
3			A	14+10 = 24min
2			C	24+2 = 26min
1			D	26+4 = 30min

The average turnaround time is:
(6+14+24+26+30) / 5 = 20min

(c) First-come-first-served (in order A, . . . , E).
[3 marks]

Run in order 10, 6, 2, 4, 8
Job	Turnaround time
A	10min
B	10+6 = 16min
C	16+2 = 18min
D	18+4 = 22min
E	22+8 = 30min

The average turnaround time is:
(10+16+18+22+30) / 5 = 19.2min

(d) Shortest process next.
[3 marks]

Running time	Job Turnaround time
2				C	2min
4				D	2+4 = 6min
6				B	6+6 = 12min
8				E	12+8 = 20min
10				A	20+10 = 30min

The average turnaround time is:
(2+6+12+20+30) / 5 = 14min

You can ignore process switching overhead and assume that all jobs are
completely CPU-bound.
Subtotal: [15 marks]

3. Consider the following variant of the dining philosophers problem. Sup-
pose that there are two types of philosophers. A \righty" always picks up
his right fork first:

begin
	repeat
		think;
		wait ( fork[ (i+1) mod 5] );
		wait ( fork[i] );
		eat;
		signal ( fork[i] );
		signal ( fork[ (i+1) mod 5] );
	forever
end;

while a \lefty" always picks up his left fork first:

begin
	repeat
		think;
		wait ( fork[i] );
		wait ( fork[ (i+1) mod 5] );
		eat;
		signal ( fork[ (i+1) mod 5] );
		signal ( fork[i] );
	forever
end;

Assume that there is at least one righty and one lefty at the round table
and that the scheduling is fair. Determine whether
(a) deadlock
[12 marks]
(b) starvation
[8 marks]
are possible. [Hint: First find out whether a philosopher can pick up at
least one fork.]
Subtotal: [20 marks]

4. A UNIX file system has 2-KB blocks and 4-byte disk addresses. What is
the maximum file size if i-nodes contain 10 direct entries, and one single,
double, and triple indirect entry each. (The blocksize of the data blocks
referenced by the i-node is the same as the file system blocksize.)
[15 marks]